{
	"metadata": {
		"version": 2
	},
	"application": {
		"name": "javarest",
		"language": "JAVA_GRADLE",
		"artifact_store": {
			"type": "s3",
			"repositories": [
				{
					"category": "rc-packaging",
					"bucket": "guide-rails-calculi-rc"
				},
				{
					"category": "final-packaging",
					"bucket": "guide-rails-calculi-final"
				},
				{
					"category": "logs",
					"bucket": "guide-rails-calculi-logs"
				}
			]
		}
	},
	"pipeline": {
		"segments": [
			{
				"name": "Build",
				"segment_type": "build",
				"publish_attributes": {
					"publish": true,
					"docker_images": [
						{
							"repository": "guide-rails/((application.name))",
							"tags": [
								"((application.version))"
							],
							"context": ".",
							"docker_registry_alias_id": "b7538d0f-4373-4d39-7300-76e6642699b1"
						}
					]
				},
				"exit_actions": {
					"default": {
						"fetch_logs": true,
						"code_analysis": {
							"publish": true,
							"properties": null
						},
						"delete_instances": true
					},
					"on_success": {
						"code_analysis": null
					},
					"on_failure": {
						"code_analysis": null
					},
					"on_abort": {
						"code_analysis": null
					}
				},
				"properties": [
					{
						"name": "gradle.user.home",
						"value": "${SEGMENT_BASE_DIR}/cache/.gradle",
						"description": "GRADLE_USER_HOME is set to ${SEGMENT_BASE_DIR}/cache/.gradle by default, when caching is enabled. Caches are maintained on the worker where your build gets allocated. For a new worker assigned to the build, the cache will be re-created"
					},
					{
						"name": "ivy.defaultCacheDir",
						"value": "${SEGMENT_BASE_DIR}/cache/.ivy",
						"description": "ivy cache directory is set to ${SEGMENT_BASE_DIR}/cache/.ivy by default, when caching is enabled. Caches are maintained on the worker where your build gets allocated. For a new worker assigned to the build, the cache will be re-created"
					},
					{
						"name": "maven.repo.local",
						"value": "${SEGMENT_BASE_DIR}/cache/.m2",
						"description": "maven local repository is set to ${SEGMENT_BASE_DIR}/cache/.m2 by default, when caching is enabled. Caches are maintained on the worker where your build gets allocated. For a new worker assigned to the build, the cache will be re-created"
					},
					{
						"name": "additional_properties_file",
						"value": "sonar-project.properties",
						"type": "string"
					}
				],
				"deployment_strategy": {},
				"application_init": {},
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"post_deployment_actions": {
					"loadbalancer": {}
				},
				"cache_info": {
					"paths": [
						"((gradle.user.home))",
						"((ivy.defaultCacheDir))",
						"((maven.repo.local))"
					]
				},
				"tasks": [
					{
						"name": "javarest",
						"steps": [
							{
								"name": "Build",
								"definition": "Build",
								"command": "./gradlew build --no-daemon\n\ncp build/test-results/test/TEST-com.calculi.springbootserver.math.MathControllerTest.xml test.xml\n\ncp build/reports/jacoco/test/jacocoTestReport.xml coverage.xml\n",
								"properties": null
							}
						],
						"docker_options": {
							"docker_registry_alias_id": "b7538d0f-4373-4d39-7300-76e6642699b1",
							"repository": "dockerhub-proxy/library/openjdk:11"
						}
					}
				]
			},
			{
				"name": "Integration",
				"segment_type": "integration",
				"run_after": [
					"Build"
				],
				"exit_actions": {
					"default": {
						"fetch_logs": true,
						"code_analysis": {
							"properties": null
						},
						"delete_instances": true
					},
					"on_success": {
						"code_analysis": {
							"properties": null
						}
					},
					"on_failure": {
						"code_analysis": {
							"properties": null
						}
					},
					"on_abort": {
						"code_analysis": {
							"properties": null
						}
					}
				},
				"properties": [
					{
						"name": "consul.servicename",
						"value": "((application.name))-((segment.name))",
						"type": "string"
					}
				],
				"deployment_strategy": {
					"canaries": 1,
					"max_in_flight": 1,
					"canary_watch_time": "5000-30000",
					"update_watch_time": "5000-30000",
					"serial": false
				},
				"application_init": {},
				"process": {
					"init": {}
				},
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"instance_groups": [
					{
						"name": "((application.name))",
						"number_of_instances": 1,
						"cloud_provider_type": "aws",
						"vm_type": "medium",
						"os_type": "default",
						"networks": [
							"integration"
						],
						"availability_zones": [
							"default"
						],
						"deployment_strategy": {},
						"dependencies": [
							{
								"id": "dccb10e9-9b24-4519-4394-7e5603a5cc9c",
								"name": "consul",
								"release": "consul",
								"provides": [
									{
										"name": "consul_servers.as",
										"value": "consul_1"
									}
								],
								"consumes": [
									{
										"name": "consul_servers.from",
										"value": "consul_1"
									}
								],
								"properties": [
									{
										"name": "consul.servicename",
										"value": "((consul.servicename))"
									},
									{
										"name": "consul.environment",
										"value": "((consul.environment))"
									},
									{
										"name": "consul.datacenter",
										"value": "((consul.datacenter))"
									},
									{
										"name": "consul.server",
										"value": "false"
									},
									{
										"name": "consul.joinservers",
										"value": "((consul.joinservers))"
									},
									{
										"name": "calculi.intermediate.cert",
										"value": "grsecret:tls.cert"
									},
									{
										"name": "calculi.intermediate.key",
										"value": "grsecret:tls.key"
									}
								]
							}
						]
					}
				],
				"post_deployment_actions": {
					"loadbalancer": {}
				},
				"tasks": [
					{
						"name": "health_check",
						"steps": [
							{
								"name": "health check",
								"definition": "health check",
								"command": "function healthCheck() {\n\tappURL=$1\n\tstatusCode=$(curl -s -L -o /dev/null -w \"%{http_code}\" ${appURL} || true)\n\n\tcount=40\n\twhile [ $count -ge 0 ]; do \n\t\tif [ $statusCode -ne 200 ]; then \n\t\t\techo \"Waiting for application to be healthy...\"\n\t\t\tsleep 5\n\t\t\tcount=$(expr $count - 1)\n\t\t\tstatusCode=$(curl -L -s -o /dev/null -w \"%{http_code}\" ${appURL} || true)\n\t\t\techo \"Received status code: ${statusCode} from ${appURL}\"\n\t\telse \n\t\t\tbreak\n\t\tfi\n\tdone\n\n\tif [ $statusCode -ne 200 ]; then\n\t\techo \"Failed to connect to application on DNS...\"\n\t\texit 1\n\tfi\n}\n\necho \"Checking application health\"\nhealthCheck \"http://((consul.servicename)).service.consul:8080/\"",
								"properties": null
							}
						],
						"docker_options": {}
					}
				],
				"k8s_instance_groups": [
					{
						"tool_config_alias_id": "36c1292d-3351-4889-6912-d9b085795740",
						"docker_registry_alias_id": "b7538d0f-4373-4d39-7300-76e6642699b1",
						"name": "((application.name))",
						"cluster_name": "",
						"namespace": "((application.name))-((application.branch))",
						"replicas": 3,
						"containers": [
							{
								"name": "((application.name))",
								"image": "guide-rails/((application.name)):((application.version))",
								"ports": [
									{
										"name": "app-endpoint",
										"hostPort": 8080,
										"containerPort": 8080,
										"protocol": "TCP"
									}
								],
								"resources": {
									"limits": {
										"cpu": "100m",
										"memory": "200Mi"
									},
									"requests": {
										"cpu": "100m",
										"memory": "200Mi"
									}
								},
								"livenessProbe": {
									"httpGet": {
										"path": "/",
										"port": 8080,
										"scheme": "HTTP"
									},
									"initialDelaySeconds": 120,
									"timeoutSeconds": 5,
									"periodSeconds": 20,
									"failureThreshold": 3
								},
								"readinessProbe": {
									"httpGet": {
										"path": "/",
										"port": 8080,
										"scheme": "HTTP"
									},
									"initialDelaySeconds": 90,
									"timeoutSeconds": 5,
									"periodSeconds": 20,
									"successThreshold": 2,
									"failureThreshold": 3
								},
								"imagePullPolicy": "Always"
							}
						],
						"autoscaling": {
							"metadata": {
								"creationTimestamp": null
							},
							"spec": {
								"scaleTargetRef": {
									"kind": "",
									"name": ""
								},
								"minReplicas": 1,
								"maxReplicas": 3,
								"metrics": [
									{
										"type": "Resource",
										"resource": {
											"name": "cpu",
											"target": {
												"type": "AverageValue",
												"averageValue": "70"
											}
										}
									},
									{
										"type": "Resource",
										"resource": {
											"name": "memory",
											"target": {
												"type": "AverageValue",
												"averageValue": "40"
											}
										}
									}
								]
							},
							"status": {
								"currentReplicas": 0,
								"desiredReplicas": 0,
								"currentMetrics": null,
								"conditions": null
							}
						},
						"load_balancing_type": 2,
						"service_name": "((application.name))-((application.branch))",
						"type": "Deployment",
						"deploy_application": true
					}
				],
				"deployment_target": 2,
				"releases": [
					{
						"id": "dccb10e9-9b24-4519-4394-7e5603a5cc9c",
						"name": "consul",
						"version": "latest"
					}
				]
			},
			{
				"name": "Production",
				"segment_type": "production",
				"persistent": true,
				"run_after": [
					"Integration"
				],
				"exit_actions": {},
				"properties": [
					{
						"name": "gr.helm.wait.timeout",
						"value": "10m",
						"type": "string"
					}
				],
				"deployment_strategy": {
					"canaries": 1,
					"max_in_flight": 1,
					"canary_watch_time": "5000-30000",
					"update_watch_time": "5000-30000",
					"serial": false
				},
				"application_init": {},
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"instance_groups": [
					{
						"name": "((application.name))",
						"number_of_instances": 1,
						"cloud_provider_type": "aws",
						"vm_type": "default",
						"os_type": "default",
						"networks": [
							"production"
						],
						"availability_zones": [
							"default"
						],
						"deployment_strategy": {},
						"dependencies": [
							{
								"name": "consul",
								"release": "consul",
								"provides": [
									{
										"name": "consul_servers.as",
										"value": "consul_1"
									}
								],
								"consumes": [
									{
										"name": "consul_servers.from",
										"value": "consul_1"
									}
								],
								"properties": [
									{
										"name": "consul.servicename",
										"value": "((consul.servicename))"
									},
									{
										"name": "consul.environment",
										"value": "((consul.environment))"
									},
									{
										"name": "consul.datacenter",
										"value": "((consul.datacenter))"
									},
									{
										"name": "consul.server",
										"value": "false"
									},
									{
										"name": "consul.joinservers",
										"value": "((consul.joinservers))"
									},
									{
										"name": "calculi.intermediate.cert",
										"value": "grsecret:tls.cert"
									},
									{
										"name": "calculi.intermediate.key",
										"value": "grsecret:tls.key"
									}
								]
							}
						]
					}
				],
				"tasks": [
					{
						"name": "health_check",
						"steps": [
							{
								"name": "health check",
								"definition": "health check",
								"command": "function healthCheck() {\n\tappURL=$1\n\tstatusCode=$(curl -s -L -o /dev/null -w \"%{http_code}\" ${appURL} || true)\n\n\tcount=40\n\twhile [ $count -ge 0 ]; do \n\t\tif [ $statusCode -ne 200 ]; then \n\t\t\techo \"Waiting for application to be healthy...\"\n\t\t\tsleep 5\n\t\t\tcount=$(expr $count - 1)\n\t\t\tstatusCode=$(curl -L -s -o /dev/null -w \"%{http_code}\" ${appURL} || true)\n\t\t\techo \"Received status code: ${statusCode} from ${appURL}\"\n\t\telse \n\t\t\tbreak\n\t\tfi\n\tdone\n\n\tif [ $statusCode -ne 200 ]; then\n\t\techo \"Failed to connect to application on DNS...\"\n\t\texit 1\n\tfi\n}\n\necho \"Checking application health\"\nhealthCheck \"https://((organization.name))-((application.name)).guide-rails.io/\"",
								"properties": null
							}
						],
						"docker_options": {}
					}
				],
				"k8s_instance_groups": [
					{
						"tool_config_alias_id": "36c1292d-3351-4889-6912-d9b085795740",
						"docker_registry_alias_id": "b7538d0f-4373-4d39-7300-76e6642699b1",
						"name": "((application.name))",
						"cluster_name": "",
						"namespace": "((application.name))-((application.branch))",
						"replicas": 3,
						"containers": [
							{
								"name": "((application.name))",
								"image": "guide-rails/((application.name)):((application.version))",
								"ports": [
									{
										"name": "app-endpoint",
										"hostPort": 8080,
										"containerPort": 8080,
										"protocol": "TCP"
									}
								],
								"resources": {
									"limits": {
										"cpu": "200m",
										"memory": "400Mi"
									},
									"requests": {
										"cpu": "200m",
										"memory": "400Mi"
									}
								},
								"livenessProbe": {
									"httpGet": {
										"path": "/",
										"port": 8080,
										"scheme": "HTTP"
									},
									"initialDelaySeconds": 120,
									"timeoutSeconds": 5,
									"periodSeconds": 20,
									"failureThreshold": 3
								},
								"readinessProbe": {
									"httpGet": {
										"path": "/",
										"port": 8080,
										"scheme": "HTTP"
									},
									"initialDelaySeconds": 90,
									"timeoutSeconds": 5,
									"periodSeconds": 20,
									"successThreshold": 2,
									"failureThreshold": 3
								},
								"imagePullPolicy": "Always"
							}
						],
						"autoscaling": {
							"metadata": {
								"creationTimestamp": null
							},
							"spec": {
								"scaleTargetRef": {
									"kind": "",
									"name": ""
								},
								"minReplicas": 1,
								"maxReplicas": 3,
								"metrics": [
									{
										"type": "Resource",
										"resource": {
											"name": "cpu",
											"target": {
												"type": "AverageValue",
												"averageValue": "70"
											}
										}
									},
									{
										"type": "Resource",
										"resource": {
											"name": "memory",
											"target": {
												"type": "Utilization",
												"averageUtilization": 40
											}
										}
									}
								]
							},
							"status": {
								"currentReplicas": 0,
								"desiredReplicas": 0,
								"currentMetrics": null,
								"conditions": null
							}
						},
						"ingress_enabled": true,
						"ingress": {
							"metadata": {
								"creationTimestamp": null
							},
							"spec": {
								"rules": [
									{
										"host": "((organization.name))-((application.name)).guide-rails.io",
										"http": {
											"paths": [
												{
													"path": "/",
													"backend": {
														"servicePort": 0
													}
												}
											]
										}
									}
								]
							},
							"status": {
								"loadBalancer": {}
							}
						},
						"load_balancing_type": 2,
						"service_name": "((application.name))-((application.branch))",
						"alb_ingress_controller_annotations": {
							"alb.ingress.kubernetes.io/certificate-arn": "arn:aws:iam::818130157321:server-certificate/guide-rails-wildcard-20220726",
							"alb.ingress.kubernetes.io/healthcheck-path": "/",
							"alb.ingress.kubernetes.io/healthcheck-port": "traffic-port",
							"alb.ingress.kubernetes.io/listen-ports": "[{\"HTTP\": 80}, {\"HTTPS\":443}]",
							"alb.ingress.kubernetes.io/scheme": "internet-facing",
							"alb.ingress.kubernetes.io/ssl-redirect": "443"
						},
						"type": "Deployment",
						"deploy_application": true
					}
				],
				"deployment_target": 2,
				"releases": [
					{
						"name": "consul",
						"version": "latest"
					}
				]
			}
		],
		"exit_actions": {
			"default": {
				"fetch_logs": true,
				"code_analysis": {
					"publish": true,
					"properties": null
				},
				"delete_instances": true
			},
			"on_success": {
				"code_analysis": null
			},
			"on_failure": {
				"code_analysis": null
			},
			"on_abort": {
				"code_analysis": null
			}
		},
		"default_properties": [
			{
				"name": "consul.servicenmae",
				"value": "((application.name))",
				"type": "string"
			},
			{
				"name": "gr.helm.wait.timeout",
				"value": "5m",
				"type": "string"
			}
		],
		"deployment_files": [
			{
				"source_path": "ci/bin/start.sh",
				"target_path": "bin/start.sh"
			}
		],
		"application_init": {},
		"process": {
			"init": {},
			"stop": {},
			"pid": {}
		}
	},
	"organization": {
		"orgname": "Tutorial"
	}
}